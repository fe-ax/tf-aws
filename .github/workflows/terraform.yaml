# This workflow will run terraform plan and apply

name: Apply AWS core config
on:
  push: {}
  workflow_call:
    secrets:
      ACCOUNT_ID:
        required: true
  workflow_dispatch:
    inputs:
      ACCOUNT_ID:
        required: true
env:
  AWS_REGION : "eu-central-1"
# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  plan:
    runs-on: ubuntu-latest
    environment: plan
    outputs:
      returncode: ${{ steps.plan-step.outputs.exitcode }}
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
        with:
          repository: fe-ax/tf-aws
          ref: ${{ github.repository == 'fe-ax/tf-aws' && '' || 'main' }}

      # TODO: Change to a read-only role
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/core_role
          role-session-name: github-session-role
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3

      - name: Setup Terragrunt v0.55.1
        run: |
          # MAKE VERSION ENVIRONMENT VARIABLE
          sudo wget -q -O /usr/bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.55.1/terragrunt_linux_amd64"
          sudo chmod +x /usr/bin/terragrunt
          terragrunt -v

      - name: Terragrunt fmt
        id: fmt
        run: terragrunt fmt -check

      - name: Terragrunt Init
        id: init
        run: terragrunt init -lock-timeout=300s

      - name: Terragrunt Validate
        id: validate
        run: terragrunt validate -no-color

      - name: Terragrunt Plan
        id: plan-step
        run: terragrunt plan -no-color -detailed-exitcode -lock-timeout=300s
        continue-on-error: true

      - name: Fail if terragrunt plan failed
        id: check-plan
        if: steps.plan-step.outputs.exitcode == 1
        run: exit 1

  apply:
    runs-on: ubuntu-latest
    environment: apply
    needs: plan
    if: |
      github.ref == 'refs/heads/main' &&
      github.repository == 'fe-ax/tf-aws' &&
      needs.plan.outputs.returncode == 2
    defaults:
      run:
        working-directory: ./terraform
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4

      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/core_role
          role-session-name: github-session-role
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve -lock-timeout=300s
        continue-on-error: true
